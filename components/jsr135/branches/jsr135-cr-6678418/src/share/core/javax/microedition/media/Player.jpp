/*
 * 
 * Copyright  1990-2007 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 only, as published by the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included at /legal/license.txt).
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
 * Clara, CA 95054 or visit www.sun.com if you need additional
 * information or have any questions.
 */

package javax.microedition.media;

// #ifndef ABB [
import javax.microedition.media.protocol.DataSource;
// #endif ]
import java.io.IOException;

/* JAVADOC ELIDED */


public interface Player extends Controllable {

    /**
     * The state of the <code>Player</code> indicating that it has
     * not acquired the required information and resources to function.
     * <p>
     * Value 100 is assigned to <code>UNREALIZED</code>.
     */
    int UNREALIZED = 100;

    /**
     * The state of the <code>Player</code> indicating that it has
     * acquired the required information but not the resources to function.
     * <p>
     * Value 200 is assigned to <code>REALIZED</code>.
     */
    int REALIZED = 200;

    /**
     * The state of the <code>Player</code> indicating that it has
     * acquired all the resources to begin playing.
     * <p>
     * Value 300 is assigned to <code>PREFETCHED</code>.
     */
    int PREFETCHED = 300;

    /**
     * The state of the <code>Player</code> indicating that the
     * <code>Player</code> has already started.
     * <p>
     * Value 400 is assigned to <code>STARTED</code>.
     */
    int STARTED = 400;

    /**
     * The state of the <code>Player</code> indicating that the
     * <code>Player</code> is closed.
     * <p>
     * Value 0 is assigned to <code>CLOSED</code>.
     */
    int CLOSED = 0;

    /**
     * The returned value indicating that the requested time is unknown.
     * <p>
     * Value -1 is assigned to <code>TIME_UNKNOWN</code>.
     */
    long TIME_UNKNOWN = -1;
    
/* JAVADOC ELIDED */
    void realize() throws MediaException;

/* JAVADOC ELIDED */
    void prefetch() throws MediaException;

/* JAVADOC ELIDED */
    void start() throws MediaException;

/* JAVADOC ELIDED */
    void stop() throws MediaException;

/* JAVADOC ELIDED */
    void deallocate();

/* JAVADOC ELIDED */
    void close();
    
    // #ifndef ABB [
    /**
     * Sets the <code>TimeBase</code> for this <code>Player</code>.
     * <p>
     * A <code>Player</code> has a default <code>TimeBase</code> that
     * is determined by the implementation. 
     * To reset a <code>Player</code> to its default 
     * <code>TimeBase</code>, call <code>setTimeBase(null)</code>.
     *
     * @param master The new <CODE>TimeBase</CODE> or 
     * <CODE>null</CODE> to reset the <code>Player</code>
     * to its default <code>TimeBase</code>.
     * @exception IllegalStateException Thrown if the <code>Player</code>
     * is in the <i>UNREALIZED</i>, <i>STARTED</i> or <i>CLOSED</i> state.
     * @exception MediaException Thrown if
     * the specified <code>TimeBase</code> cannot be set on the 
     * <code>Player</code>.
     * @see #getTimeBase
     */
    void setTimeBase(TimeBase master) 
	throws MediaException;
    // #endif ]

    // #ifndef ABB [
    /**
     * Gets the <code>TimeBase</code> that this <code>Player</code> is using.
     * @return The <code>TimeBase</code> that this <code>Player</code> is using.
     * @see #setTimeBase
     *
     * @exception IllegalStateException Thrown if the <code>Player</code>
     * is in the <i>UNREALIZED</i> or <i>CLOSED</i> state.
     */
    TimeBase getTimeBase();
    // #endif ]

    /**
     * Sets the <code>Player</code>'s&nbsp;<i>media time</i>.
     * <p>
     * For some media types, setting the media time may not be very
     * accurate.  The returned value will indicate the 
     * actual media time set.
     * <p>
     * Setting the media time to negative values will effectively
     * set the media time to zero.  Setting the media time to
     * beyond the duration of the media will set the time to
     * the end of media.
     * <p>
     * There are some media types that cannot support the setting
     * of media time.  Calling <code>setMediaTime</code> will throw
     * a <code>MediaException</code> in those cases.
     * 
     * @param now The new media time in microseconds.
     * @return The actual media time set in microseconds.
     * @exception IllegalStateException Thrown if the <code>Player</code>
     * is in the <i>UNREALIZED</i> or <i>CLOSED</i> state.
     * @exception MediaException Thrown if the media time
     * cannot be set.
     * @see #getMediaTime
     */
    long setMediaTime(long now) throws MediaException;

/* JAVADOC ELIDED */
    long getMediaTime();

    /**
     * Gets the current state of this <code>Player</code>.
     * The possible states are: <i>UNREALIZED</i>,
     * <i>REALIZED</i>, <i>PREFETCHED</i>, <i>STARTED</i>, <i>CLOSED</i>.
     * 
     * @return The <code>Player</code>'s current state.
     */
    int getState();

    /**
     * Get the duration of the media.
     * The value returned is the media's duration
     * when played at the default rate.
     * <br>
     * If the duration cannot be determined (for example, the
     * <code>Player</code> is presenting live
     * media)  <CODE>getDuration</CODE> returns <CODE>TIME_UNKNOWN</CODE>.
     *
     * @return The duration in microseconds or <code>TIME_UNKNOWN</code>.
     * @exception IllegalStateException Thrown if the <code>Player</code>
     * is in the <i>CLOSED</i> state.
     */
    long getDuration();

    /**
     * Get the content type of the media that's
     * being played back by this <code>Player</code>.
     * <p>
     * See <a href="Manager.html#content-type">content type</a>
     * for the syntax of the content type returned.
     *
     * @return The content type being played back by this 
     * <code>Player</code>.
     * @exception IllegalStateException Thrown if the <code>Player</code>
     * is in the <i>UNREALIZED</i> or <i>CLOSED</i> state.
     */
    String getContentType();


/* JAVADOC ELIDED */

    void setLoopCount(int count);

/* JAVADOC ELIDED */
    void addPlayerListener(PlayerListener playerListener);

/* JAVADOC ELIDED */
    void removePlayerListener(PlayerListener playerListener);
}
