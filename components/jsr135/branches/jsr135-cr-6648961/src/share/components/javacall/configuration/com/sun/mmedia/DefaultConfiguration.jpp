/*
 *
 * Copyright  1990-2007 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 only, as published by the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included at /legal/license.txt).
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
 * Clara, CA 95054 or visit www.sun.com if you need additional
 * information or have any questions.
 */
package com.sun.mmedia;

import javax.microedition.media.Manager;
import com.sun.j2me.log.Logging;
import com.sun.j2me.log.LogChannels;
import java.util.Vector;

/**
 *  The default configuration module for an MMAPI.
 *  implementation supporting the http, https and
 *  device protocols as well as the following
 *  content types:
 *
 *      Tones,
 *      Tone Sequences,
 *      AMR Narrowband
 *      AMR Wideband.
 *      GIF.
 *
 *  Please note:
 *
 *  Tone Sequences are supported over http and https in tone sequence
 *  file format (.jts).
 *
 *  Both single tones and tone sequence are also supported
 *  over the device protocol.
 *
 */
public class DefaultConfiguration extends Configuration {

    public final static String maps[][] = {
        {"GIF", "com.sun.mmedia.GIFPlayer"},
        {BasicPlayer.MEDIA_FORMAT_CAPTURE_VIDEO, "com.sun.mmedia.DirectCamera"},
        {AUDIO_CAPTURE_LOCATOR, "com.sun.mmedia.DirectPlayer"},
    };

    /**
     *  Handle for the Image Access Environment...
     */
    private static ImageAccess imageAccessor;

    /**
     *Constructor for the DefaultConfiguration object
     */
    public DefaultConfiguration() {
        super();

        // Protocol handlers.
        handlers.put("http", "com.sun.mmedia.protocol.CommonDS");
        handlers.put("https", "com.sun.mmedia.protocol.CommonDS");

        // #ifdef USE_FILE_CONNECTION [
        handlers.put("file", "com.sun.mmedia.protocol.CommonDS");
        // #endif

        handlers.put("rtsp", "com.sun.mmedia.protocol.CommonDS");
        handlers.put("rtp", "com.sun.mmedia.protocol.CommonDS");

        handlers.put("device", "com.sun.mmedia.protocol.CommonDS");
        handlers.put("capture", "com.sun.mmedia.protocol.CommonDS");

        // Content handlers.
        for (int i = 0; i < maps.length; ++i) {
            handlers.put(maps[i][0], maps[i][1]);
        }

        // Mime types
        mFormats.put("gif", "GIF");

        // Mime types
        mimeTypes.put("jts", MIME_AUDIO_TONE);
        mimeTypes.put("mid", MIME_AUDIO_MIDI);
        mimeTypes.put("midi", MIME_AUDIO_MIDI);
        mimeTypes.put("rmi", MIME_AUDIO_MIDI);
        mimeTypes.put("kar", MIME_AUDIO_MIDI);
        mimeTypes.put("wav", MIME_AUDIO_WAV);
        mimeTypes.put("mp3", MIME_AUDIO_MP3);
        mimeTypes.put("m4a", MIME_AUDIO_MP4);
        mimeTypes.put("qcp", MIME_AUDIO_QCELP);
        mimeTypes.put("aac", MIME_AUDIO_AAC);
        mimeTypes.put("amr", MIME_AUDIO_AMR);
        mimeTypes.put("awb", MIME_AUDIO_AMR_WB);
        mimeTypes.put("3gp", MIME_VIDEO_3GPP);
        mimeTypes.put("mpg", MIME_VIDEO_MPEG);
        mimeTypes.put("mp4", MIME_VIDEO_MPEG4);
        mimeTypes.put("wmv", MIME_VIDEO_WMV);
        mimeTypes.put("avi", MIME_VIDEO_AVI);
        mimeTypes.put("gif", MIME_IMAGE_GIF);

        // for converting
        mimeTypes.put("audio/tone", MIME_AUDIO_TONE);

        imageAccessor = new MIDPImageAccessor();
    }

    protected native int    nListContentTypesOpen(String protocol);
    protected native String nListContentTypesNext(int hdlr);
    protected native void   nListContentTypesClose(int hdlr);

    protected native int    nListProtocolsOpen(String mime);
    protected native String nListProtocolsNext(int hdlr);
    protected native void   nListProtocolsClose(int hdlr);

    /**
     *  Gets the supportedContentTypes attribute of the DefaultConfiguration object
     *
     * @param  protocol  Description of the Parameter
     * @return           The supportedContentTypes value
     */
    public String[] getSupportedContentTypes(String protocol) {

        // #ifndef USE_FILE_CONNECTION [
        if (protocol != null && protocol.equals("file")) {
            return new String[0];
        }
        // #endif ]

        String arr[] = super.getSupportedContentTypes(protocol);
        Vector v = new Vector(arr.length);
        for (int i=0; i<arr.length; i++) v.addElement(arr[i]);

        String ll_protocol[] = new String[] {protocol};
        if (protocol != null) {
            for (int i=0; i<Configuration.INTERNAL_PROTOCOLS.length; i++) {
                if (protocol.equals(Configuration.INTERNAL_PROTOCOLS[i])) {
                    ll_protocol = new String[] {"file", "memory"};
                    break;
                }
            }
            if(protocol.equals("rtsp")) {
                ll_protocol = new String[] {"rtp"};
            }
        }

        for (int k=0; k<ll_protocol.length; k++) {
            int hdlr = nListContentTypesOpen(ll_protocol[k]);
            if (hdlr != 0) {
                String s;
                boolean found=false;

                while ((s = nListContentTypesNext(hdlr)) != null) {
                    for (int i=0; i<v.size() && !found; i++) {
                        found = s.equals((String)v.elementAt(i));
                    }
                    if (!found) {
                        v.addElement(s);
                    }
                }
                nListContentTypesClose(hdlr);
            }
        }

        arr = new String[v.size()];
        v.copyInto(arr);

        /* Add java only implementations */
        return arr;
    }

    /**
     * Get content type helper function
     */
    public static String getContentType(String locator) {
        if (locator != null) {
            if (locator.equals(Manager.TONE_DEVICE_LOCATOR)) {
                return DefaultConfiguration.MIME_AUDIO_TONE;
            } else if (locator.equals(Manager.MIDI_DEVICE_LOCATOR)) {
                return DefaultConfiguration.MIME_AUDIO_MIDI;
            } else if (locator.equals(Configuration.AUDIO_CAPTURE_LOCATOR)) {
                return DefaultConfiguration.MIME_AUDIO_WAV;
            } else if (locator.equals(Configuration.VIDEO_CAPTURE_LOCATOR)) {
                return DefaultConfiguration.MIME_IMAGE_PNG;
            }
        }    

        return "";
    }

    /**
     *  Gets the supportedProtocols attribute of the DefaultConfiguration object
     *
     * @param  content_type  Description of the Parameter
     * @return               The supportedProtocols value
     */
    public String[] getSupportedProtocols(String content_type) {

        String arr[] = super.getSupportedProtocols(content_type);

        int hdlr = nListProtocolsOpen(content_type);
        if (hdlr != 0) {
            String s;

            Vector v = new Vector(arr.length);
            for (int i=0; i<arr.length; i++) v.addElement(arr[i]);

            while ((s = nListProtocolsNext(hdlr)) != null) {
                if (s.equals("file") || s.equals("memory")) {
                    for (int i=0; i<Configuration.INTERNAL_PROTOCOLS.length; i++) {
                        addIfNotExist(v, Configuration.INTERNAL_PROTOCOLS[i]);
                    }
                } else if (s.equals("rtp")) {
                    addIfNotExist(v, "rtsp");    
                } else {
                    addIfNotExist(v, s);    
                }
            }
            nListProtocolsClose(hdlr);

            arr = new String[v.size()];
            v.copyInto(arr);
        }
        return arr;
    }

    public boolean isRadioSupported()
    {
        return nIsRadioSupported();
    }
    
    private native boolean nIsRadioSupported();
    
    private void addIfNotExist(Vector v, String s) {
        boolean found = false;
        for (int i=0; i<v.size() && !found; i++) {
            found = s.equals((String)v.elementAt(i));
        }
        if (!found) {
            v.addElement(s);
        }
    }


    public ImageAccess getImageAccessor() {
        return imageAccessor;
    }

    /**
     * Gets the video renderer.
     *
     * @return The video renderer
     */
    public VideoRenderer getVideoRenderer(BasicPlayer player) {
        // workaround for demo only
        return ModelVideoRenderer.getVideoRenderer(player);
        //return new MIDPVideoRenderer(player);
    }

    /**
     *  Gets the tonePlayer attribute of the DefaultConfiguration object
     *
     * @return    The tonePlayer value
     */
    public TonePlayer getTonePlayer() {
        return new NativeTonePlayer();
    }
    
    //public MIDIRenderer getMIDIRenderer() 
    //{
    //    return null;
    //}

    public String getProperty(String key) {
        String value = (String) properties.get(key);
        
        return value;
    } 

    public void setProperty(String key, String value) {
        properties.put(key, value);
    }       

    private Object createInstanceOf(String propertyName) {
        try {
            String propertyValue = getProperty(propertyName);
            Class propertyClass = Class.forName(propertyValue);
            Object propertyInstance = propertyClass.newInstance();
            return propertyInstance;
        } catch (Exception e) {
            return null;
        }
    }
}
